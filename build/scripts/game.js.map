{
  "version": 3,
  "sources": [
    "node_modules/browser-pack/_prelude.js",
    "src\\index.js",
    "src\\lib\\Geometry.js",
    "src\\lib\\Orbit.js",
    "src\\objects\\RainbowText.js",
    "src\\states\\BootState.js",
    "src\\states\\Level1State.js",
    "src\\states\\LoadState.js"
  ],
  "names": [],
  "mappings": "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",
  "file": "generated.js",
  "sourceRoot": "",
  "sourcesContent": [
    "(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw f.code=\"MODULE_NOT_FOUND\",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})",
    "import BootState from 'states/BootState';\nimport LoadState from 'states/LoadState';\nimport Level1State from 'states/Level1State';\n\nclass Game extends Phaser.Game {\n  constructor() {\n    super(800, 800, Phaser.AUTO, 'content', null);\n\n    this.state.add('BootState', BootState);\n    this.state.add('LoadState', LoadState);\n    this.state.add('Level1', Level1State);\n\n    this.state.start('BootState');\n  }\n}\n\nnew Game();\n",
    "const Geometry = {\n\n  pointDistance( x, y ) {\n    return Math.sqrt( x * x + y * y );\n  },\n\n  pointDirection( x, y ) {\n    if ( x === 0 ) {\n      if ( y > 0 ) {\n        return Math.PI / 2;\n      }\n      if ( y < 0 ) {\n        return -Math.PI / 2;\n      }\n    }\n\n    return Math.atan2( y, x );\n  },\n\n  pointRotate( x, y, angle, originX = 0, originY = 0 ) {\n    return {\n      x: originX + Math.cos( angle ) * ( x - originX ) - Math.sin( angle ) * ( y - originY ),\n      y: originY + Math.cos( angle ) * ( y - originY ) + Math.sin( angle ) * ( x - originX )\n    };\n  },\n\n  pointMove( x, y, direction, distance ) {\n    const newX = x + distance;\n    return Geometry.pointRotate( newX, y, direction, x, y );\n  },\n\n  polarAdd( directionA, magnitudeA, directionB, magnitudeB ) {\n    const x = Math.cos( directionA ) * magnitudeA + Math.cos( directionB ) * magnitudeB;\n    const y = Math.sin( directionA ) * magnitudeA + Math.sin( directionB ) * magnitudeB;\n\n    return {\n      direction: Geometry.pointDirection( x, y ),\n      magnitude: Geometry.pointDistance( x, y )\n    };\n  }\n};\n\nexport default Geometry;\n",
    "// 'use strict';\n// http://www.braeunig.us/space/orbmech.htm\n\n/**\n * Ensure angle is between PI and -PI\n * @param {number} angle\n */\nfunction normalize( angle ) {\n  let value = angle;\n\n  while ( value < -Math.PI ) {\n    value += 2 * Math.PI;\n  }\n\n  while ( value > Math.PI ) {\n    value -= 2 * Math.PI;\n  }\n\n  return value;\n}\n\n\nclass Orbit {\n\n  /**\n     * Initialise an Elliptical orbit for the given initial conditions\n     * Can be used later to calculate the position of the spaceship at a given time\n     *\n     * @param {number} G\t\tThe gravitational constant\n     * @param {number} M\t\tThe mass of the primary body\n     * @param {number} X\t\tThe X position of the primary body\n     * @param {number} Y\t\tThe Y position of the primary body\n     * @param {number} R\t\tThe initial distance between the bodies\n     * @param {number} RA\tThe initial angle between the bodies (from the primary)\n     * @param {number} V\t\tThe initial velocity of the secondary body\n     * @param {number} VA\tThe initial direction of the secondary body (0 is right, PI/2 is up)\n     * @param {number} T        Time when secondary entered this elipse\n     */\n  constructor( G, M, X, Y, R, RA, V, VA, T = 0 ) {\n    // Primary Body\n    this.G = G;\n    this.M = M;\n    this.GM = G * M;\t        // Gravity and Mass (always multiplied in formulas)\n    this.X = X;\t\t        // X position of primary body\n    this.Y = Y;\t\t        // Y position of primary body\n\n    // Secondary Body\n    this.V0 = V;\t\t\t\t// Linear velocity of this body\n    this.VA0 = normalize( VA );\t// Angle of velocity in radians (0 is right, PI/2 is up)\n    this.R0 = R;\t\t\t\t// Initial radius (distance from spaceship to primary)\n    this.RA0 = normalize( RA );\t// Angle of radius\n    this.T0 = T;\n\n    const gamma = normalize( VA - RA );   // Angle between velocity and position vectors\n    this.DIR = ( gamma > 0 ) ? +1 : -1;    // +1 for clockwise, -1 for anti-clockwise\n\n    /* Find Radiuses */\n    let C = ( 2 * this.GM ) / ( R * V * V ); // Constant used in 4.25\n    const p = 1 - C;   // Quadratic coefficients in 4.25\n    const q = C;\n    const r = -Math.sin( gamma ) * Math.sin( gamma );\n    const radius1 = R * ( ( -q + Math.sqrt( q * q - 4 * p * r ) ) / ( 2 * p ) ); // Larger value is radius at periapsis\n    const radius2 = R * ( ( -q - Math.sqrt( q * q - 4 * p * r ) ) / ( 2 * p ) ); // Smaller value is radius at apoapsis\n    this.a = ( radius1 + radius2 ) / 2;\n    // console.log( 'a', this.a );\n\n    /* Find True Anomaly (angle from primary to spaceship where axes are aligned on the ellipse) [equation 4.28]*/\n    C = ( R * V * V ) / this.GM;\t// Constant used in 4.28\n    this.NU0 = Math.atan2( C * Math.sin( gamma ) * Math.cos( gamma ), C * Math.sin( gamma ) * Math.sin( gamma ) - 1 ); // Initial True anomaly\n\n    /* Eccentricity */\n    this.e = Math.sqrt( ( C - 1 ) * ( C - 1 ) * Math.sin( gamma ) * Math.sin( gamma ) + Math.cos( gamma ) * Math.cos( gamma ) ); // Eccentricity\n\n    // console.log( 'e', this.e );\n    /* Other Anomalys */\n    this.E0 = Math.atan2( Math.sqrt( 1 - this.e * this.e ) * Math.sin( this.NU0 ), this.e + Math.cos( this.NU0 ) );\t// Initial eccentric anomaly\n    this.M0 = this.E0 - this.e * Math.sin( this.E0 ); \t\t\t\t\t\t\t\t\t\t// Initial mean anomaly with 4.41\n\n    /* Other Ellipse Properties */\n    this.n = Math.sqrt( this.GM / ( this.a * this.a * this.a ) );\t\t// Average angular velocity\n    this.period = ( 2 * Math.PI / this.n );\t\t// Period\n  }\n\n\n  /**\n     * @returns {number} Period of the orbit\n     */\n  getPeriod() {\n    return this.period;\n  }\n\n  getLength() {\n    return this.a * 2;\n  }\n\n  getWidth() {\n    return this.a * 2 * Math.sqrt( 1 - this.e * this.e );\n  }\n\n\n  /**\n     * Get the angle of where the secondary body will be relative to the primary body at the specified time\n     */\n  getAngleToSecondary( time ) {\n    const nu = this.getTrueAnomaly( time );\n\n    // We need to do two adjustments to the angle - since we're doing everything relative to 'nu' we subtract that off,\n    // then rotate everything by 'posangle' (the original angle to spaceship),\n    // then we have actual position = r cos theta, r sin theta.\n    const angle = nu - this.NU0 + this.RA0;\n    return normalize( angle );\n  }\n\n  /**\n     * Get the altitude (distance from the primary) of the secondary body\n     */\n  getRadiusOfSecondary( time ) {\n    const nu = this.getTrueAnomaly( time );\n    const r = this.a * ( 1 - this.e * this.e ) / ( 1 + this.e * Math.cos( nu ) );\n    return r;\n  }\n\n\n  /**\n     * Get the direction of where the secondary body will be heading at the specified time\n     */\n  getDirectionOfSecondary( time ) {\n    const nu = this.getTrueAnomaly( time );\n\n    // 4.13  r1*v1*sin(g1) = r2*v2*sin(g2)\n    // g2 is the angle between the position angle and the direction of flight\n    const C = this.R0 * this.V0 * Math.sin( normalize( this.VA0 - this.RA0 ) );\n\n    const r2 = this.getRadiusOfSecondary( time );\n    const v2 = this.getVelocityOfSecondary( time );\n\n    let val = C / ( r2 * v2 );\n    // Avoid occasional double rounding error that puts value slightly outside allowed range\n    val = Math.min( val, 1 );\n    val = Math.max( val, -1 );\n    let g2 = Math.asin( val );\n\n    if ( nu > 0 ) { // Spaceship is returning, so g2 is on other side\n      g2 = - Math.PI - g2;\n    }\n\n    // We need to do two adjustments to the angle - since we're doing everything relative to 'nu' we subtract that off,\n    // then rotate everything by NU0 (the original angle to spaceship)\n    const direction = g2 + nu - this.NU0 + this.RA0;\n    return normalize( direction );\n  }\n\n  /**\n     * Get the speed of the secondary at the specified time\n     */\n  getVelocityOfSecondary( time ) {\n    const nu = this.getTrueAnomaly( time );\n    const r = this.a * ( 1 - this.e * this.e ) / ( 1 + this.e * Math.cos( nu ) );\n    const speed = Math.sqrt( this.GM * ( ( 2 / r ) - ( 1 / this.a ) ) );\n    return speed;\n  }\n\n  /**\n     * Get the point on the ellipse where the secondary body will be at the specified time\n     */\n  getPositionOfSecondary( time ) {\n    const nu = this.getTrueAnomaly( time );\n    const radius = this.a * ( 1 - this.e * this.e ) / ( 1 + this.e * Math.cos( nu ) ); // formula 4.43 gives us the distance from planet to spaceship given the true anomaly\n\n    // We need to do two adjustments to the angle - since we're doing everything relative to 'nu' we subtract that off, then rotate everything by 'posangle' (the original angle to spaceship)\n    // then we have actual position = r cos theta, r sin theta.\n    return {\n      x: this.X + radius * Math.cos( nu - this.NU0 + this.RA0 ),\n      y: this.Y + radius * Math.sin( nu - this.NU0 + this.RA0 )\n    };\n  }\n\n  getPointOnEllipse( angle ) {\n    const radius = this.a * ( 1 - this.e * this.e ) / ( 1 + this.e * Math.cos( angle ) ); // formula 4.43 gives us the distance from planet to spaceship given the true anomaly\n\n    // need to do two adjustments to the angle - since we're doing everything relative to 'nu' ew subtract that off, then rotate everything by 'posangle' (the original angle to spaceship)\n    // then we have actual position = r cos theta, r sin theta.\n    return {\n      x: radius * Math.cos( angle - this.NU0 + this.RA0 ),\n      y: radius * Math.sin( angle - this.NU0 + this.RA0 )\n    };\n  }\n\n\n  getTrueAnomaly( time ) {\n    let t = time - this.T0; // correct for time when the body entered the orbit\n    t = t % this.period;\n\n    /* Here I'm breaking away from the website a little bit, as its formula in 4.40 just uses cos,\n        * and there are two solutions in a full period when doing inverse cos - this led to only half\n        * of the orbit being calculated correctly. Instead, using the tan formula from\n        * http://en.wikipedia.org/wiki/Eccentric_anomaly so that I can use atan2 */\n\n    // Add on 'time' lots of n to the mean anomaly in 4.38\n    const M = this.M0 + this.DIR * this.n * t;\n\n    // Calculate what E value that correspond to by solving equation 4.41 in reverse. As mentioned there, this can't be done exactly, needs approximation methods\n    const E = this.getEccentricAnomalyFromMeanAnomaly( M );\n\n    // again, using a tan formula to calculate the true anomaly from the eccentric anomaly - again from wikipedia page for tan (theta/2),\n    // though have split the right hand side up into sin / cos - found some other website that does the same thing, forget which\n    const newnu = 2 * Math.atan2( Math.sqrt( 1 + this.e ) * Math.sin( E / 2 ), Math.sqrt( 1 - this.e ) * Math.cos( E / 2 ) );\n    return normalize( newnu );\n  }\n\n  getEccentricAnomalyFromMeanAnomaly( M ) {\n    // Approximation to solve for E when given M\n    let ans = M;\n    let count = 0;\n    while ( count < 1000 ) {\n      const newans = ans - ( ans - this.e * Math.sin( ans ) - M ) / ( 1 - this.e * Math.cos( ans ) );\n      if ( Math.abs( ans - newans ) < 1e-9 ) {\n        return newans;\n      }\n      ans = newans;\n\n      count++;\n    }\n\n    return ans;\n  }\n\n}\n\n\nif ( typeof module !== 'undefined' && typeof module.exports !== 'undefined' ) {\n  module.exports = Orbit;\n}\n\n",
    "class RainbowText extends Phaser.Text {\n  constructor(game, x, y, text) {\n    super(game, x, y, text, { font: '24px Arial', fill: '#ff0044', align: 'center' });\n  \n    this._speed = 125; // ms\n    this._colorIndex = 0;\n    this._colors = ['#ee4035', '#f37736', '#fdf498', '#7bc043', '#0392cf'];\n  \n    this.colorize();\n    this.startTimer();\n  \n    this.game.stage.addChild(this);\n  }\n  \n  startTimer() {\n    this.game.time.events.loop(this._speed, this.colorize, this).timer.start();\n  }\n  \n  colorize() {\n    for (let i = 0; i < this.text.length; i++) {\n      if (this._colorIndex === this._colors.length) {\n        this._colorIndex = 0;\n      }\n  \n      this.addColor(this._colors[this._colorIndex], i);\n      this._colorIndex++;\n    }\n  }\n\n  remove() {\n    this.game.stage.removeChild(this);\n  }\n}\n  \nexport default RainbowText;\n  ",
    "import RainbowText from 'objects/RainbowText';\n\nclass BootState extends Phaser.State {\n  preload() {\n    this.game.load.image( 'progressBar', 'assets/progressbar.png' );\n  }\n\n  create() {\n    this.game.stage.backgroundColor = 0x000000;\n\n    const center = { x: this.game.world.centerX, y: this.game.world.centerY };\n    this.preloadBar = this.add.sprite(center.x - 65, center.y, 'progressBar');\n    this.load.setPreloadSprite(this.preloadBar);\n\n    const loadingText = new RainbowText(this.game, center.x, center.y + 30, 'Loading');\n    loadingText.anchor.x = 0.5;\n    this.game.loadingText = loadingText;\n\n    this.game.state.start('LoadState');\n  }\n}\n\nexport default BootState;\n",
    "/* eslint-disable no-console */\nimport Orbit from 'lib/Orbit';\nimport Geometry from 'lib/Geometry';\n\n\nclass Level1State extends Phaser.State {\n\n  create() {\n    const game = this.game;\n\n    game.stage.backgroundColor = '#000000';\n    game.world.setBounds( -2000, -2000, 4000, 4000 );\n\n    game.physics.startSystem( Phaser.Physics.ARCADE );\n\n    // Drawing surface for orbit paths\n    this.paths = game.add.graphics( 0, 0 );\n\n    // Planet\n    const planet = game.add.sprite( 0, 0, 'planet' );\n    planet.anchor.set( 0.5 );\n    planet.scale.set( 2 );\n    planet.enableBody = true;\n    game.physics.enable( planet, Phaser.Physics.ARCADE );\n    this.planet = planet;\n\n    // Ship\n    const ship = {\n      angle: 0,\n      omega: 0,\n      sprite: null,\n      orbit: null\n    };\n    ship.sprite = game.add.sprite( 0, 300, 'ship' );\n    ship.sprite.anchor.set( 0.5 );\n    //ship.sprite.scale.set( 0.5 );\n    ship.sprite.enableBody = true;\n    game.physics.enable( ship.sprite, Phaser.Physics.ARCADE );\n    const v = Math.sqrt( ( 0.1 * 10 ) / 300 );\n    ship.orbit = new Orbit( 0.1, 10, 0, 0, 300, Math.PI * 0.5, v, 0 );\n    this.ship = ship;\n\n    // Mines/Projectiles\n    const projectiles = game.add.group();\n    projectiles.enableBody = true;\n    projectiles.physicsBodyType = Phaser.Physics.ARCADE;\n    projectiles.createMultiple( 40, 'mine' );\n    projectiles.setAll( 'anchor.x', 0.5 );\n    projectiles.setAll( 'anchor.y', 0.5 );\n    this.projectiles = projectiles;\n\n    // Input\n    this.cursors = game.input.keyboard.createCursorKeys();\n    game.input.keyboard.addKeyCapture( [ Phaser.Keyboard.SPACEBAR ] );\n\n    // Debug lines\n    this.radius = new Phaser.Line();\n    this.velocity = new Phaser.Line();\n    this.minAxis = new Phaser.Line();\n    this.majAxis = new Phaser.Line();\n\n    game.camera.follow( ship.sprite );\n  }\n\n  update() {\n    const t = this.game.time.totalElapsedSeconds() * 1000;\n    const ship = this.ship;\n    const orbit = this.ship.orbit;\n\n    const p = orbit.getPositionOfSecondary( t );\n    ship.sprite.x = p.x;\n    ship.sprite.y = p.y;\n    ship.angle = ship.angle + ship.omega; // normalize( ship.angle + ship.omega );\n    ship.sprite.rotation = ship.angle + Math.PI * 0.5;\n\n    // Draw axis\n    let p1 = orbit.getPointOnEllipse( 0 );\n    let p2 = orbit.getPointOnEllipse( Math.PI );\n    this.majAxis.fromPoints( p1, p2 );\n    p1 = orbit.getPointOnEllipse( Math.PI / 2 );\n    p2 = orbit.getPointOnEllipse( -Math.PI / 2 );\n    this.minAxis.fromPoints( p1, p2 );\n\n    this.projectiles.forEachExists( ( bomb ) => {\n      if ( !bomb.orbit ) { bomb.kill(); }\n\n      const p = bomb.orbit.getPositionOfSecondary( t );\n      bomb.x = p.x;\n      bomb.y = p.y;\n    }, this );\n\n\n    this.game.physics.arcade.overlap( this.ship.sprite, this.projectiles, this.collisionHandler, null, this );\n    this.game.physics.arcade.overlap( this.planet, this.projectiles, this.collisionHandler, null, this );\n\n\n    if ( this.cursors.left.isDown ) {\n      ship.omega -= 0.0002908882; // 1 deg/sec @ 60fps (radians)\n    } else if ( this.cursors.right.isDown ) {\n      ship.omega += 0.0002908882; // 1 deg/sec @ 60fps (radians)\n    }\n\n    if ( this.cursors.up.isDown ) {\n      this.boost( t );\n    }\n    if ( this.game.input.keyboard.isDown( Phaser.Keyboard.SPACEBAR ) ) {\n      this.fireBomb();\n    }\n  }\n\n  render() {\n    // this.game.debug.cameraInfo(game.camera, 500, 32);\n    // this.game.debug.spriteInfo(shipSprite, 32, 32);\n    // this.game.debug.geom(radius);\n    // this.game.debug.geom(velocity);\n    this.game.debug.geom( this.minAxis );\n    this.game.debug.geom( this.majAxis );\n\n    // const t = this.game.time.totalElapsedSeconds() * 1000;\n    const orbit = this.ship.orbit;\n    const paths = this.paths;\n\n    paths.clear();\n    const period = orbit.getPeriod();\n    const step = period / 100.0;\n\n    let pos = orbit.getPositionOfSecondary( 0 );\n    paths.moveTo( pos.x, pos.y );\n    paths.lineStyle( 10, 0xFFFFFF, 0.25 );\n\n    for ( let i = 1; i <= 100; i++ ) {\n      pos = orbit.getPositionOfSecondary( step * i );\n      paths.lineTo( pos.x, pos.y );\n    }\n  }\n\n  boost( t ) {\n    if ( this.boostTime && this.game.time.now <= this.boostTime ) { return; }\n    this.boostTime = this.game.time.now + 50;\n    console.log( 'Firing booster' );\n\n    const orbit = this.ship.orbit;\n\n    const r = orbit.getRadiusOfSecondary( t );\n    const ra = orbit.getAngleToSecondary( t );\n    const v = orbit.getVelocityOfSecondary( t );\n    const va = orbit.getDirectionOfSecondary( t );\n\n    const newV = Geometry.polarAdd( va, v, this.ship.angle, 0.0002 );\n\n    console.log( 'old', v.toFixed(2), va.toFixed(2) );\n    console.log( 'new', newV.magnitude.toFixed(2), newV.direction.toFixed(2) );\n\n    // console.log('Replacing Orbit!:', V, newV.mag);\n    this.ship.orbit = new Orbit( orbit.G, orbit.M, orbit.X, orbit.Y, r, ra, newV.magnitude, newV.direction, t );\n  }\n\n  fireBomb() {\n    if ( this.fireTime && this.game.time.now <= this.fireTime ) { return; }\n    this.fireTime = this.game.time.now + 1000;\n    console.log( 'Firing bomb' );\n\n    const ship = this.ship;\n\n    const bomb = this.projectiles.getFirstExists( false );\n    bomb.reset( ship.sprite.x, ship.sprite.y );\n    bomb.rotation = ship.sprite.rotation;\n\n    const t = this.game.time.totalElapsedSeconds() * 1000;\n    const orbit = this.ship.orbit;\n\n    const r = orbit.getRadiusOfSecondary( t );\n    const ra = orbit.getAngleToSecondary( t );\n    const v = orbit.getVelocityOfSecondary( t );\n    const va = orbit.getDirectionOfSecondary( t );\n    const newV = Geometry.polarAdd( va, v, ship.angle, 0.015 );\n\n    bomb.orbit = new Orbit( orbit.G, orbit.M, orbit.X, orbit.Y, r, ra, newV.magnitude, newV.direction, t );\n  }\n\n  collisionHandler( ship, bomb ) { // eslint-disable-line no-unused-vars\n    console.log( 'HIT!!!' );\n  }\n}\n\nexport default Level1State;",
    "class LoadState extends Phaser.State {\n  preload() {\n    const load = this.game.load;\n    load.image( 'planet', 'assets/planet-water.png' );\n    load.image( 'ship', 'assets/ship.png' );\n    load.image( 'mine', 'assets/mine.png' );\n\n    // TODO other assets go here\n  }\n\n  create() {\n    const game = this.game;\n\n    if ( !game.device.desktop ) {\n      // Mobile device support\n      game.scale.scaleMode = Phaser.ScaleManager.SHOW_ALL;\n\n      document.body.style.backgroundColor = '#3498db';\n\n      game.scale.minWidth = 250;\n      game.scale.minHeight = 170;\n      game.scale.maxWidth = 1000;\n      game.scale.maxHeight = 680;\n\n      game.scale.pageAlignHorizontally = true;\n      game.scale.pageAlignVertically = true;\n\n      game.scale.setScreenSize( true );\n    }\n  \n    this.game.state.start('Level1');\n  }\n\n  shutdown() {\n    this.game.loadingText.remove();\n  }\n}\n\nexport default LoadState;"
  ]
}